/* 多维数组
 * 初始化
 * 下标访问
 * 循环访问（第二种重要！）
 */
#include<iostream>
using namespace std;
int main() {
	/* 多维数组的初始化 */
	int ia[3][4] = {
		{0,1,2,3},
		{4,5,6,7},
		{8,9,10,11}
	};									//内联括号非必须
	int ia2[3][4] = { 0,1,2,3,4,5,
		6,7,8,9,10,11 };				//同上，更为简洁
	int ia3[3][4] = { {0},{4},{8} };	//仅初始化每行首元素
	int ia4[3][4] = { 0,1,2,3 };		//第一行初始化，其余行为0

	/* 多维数组下标引用 */
	int(&row)[4] = ia[1];				//row捆绑到ia的第二行上，共有4个元素
										//row[0,1,2,3]为4,5,6,7
	/* 多层for循环访问元素 */
	// 第一种，传统的方法
	for(size_t i=0;i!=3;++i)
		for (size_t j = 0; j != 4; ++j) {
		//	cout << ia[i][j] << endl;
		}
	// 第二种（推荐），C++11新标准，范围for语句（需要强化）
	for(auto &row :ia)
		for (auto &col : row) {
		//	cout << col;
		}
	//上述的为什么要用引用？假设代码如下
	/*
	for(auto row:ia)
		for (auto col) { 
			; }
	*/
	//程序将无法通过编译！因为auto row:ia就已经
	//遍历了ia数组的所有元素，而不是一行一行的
	
	//这里有一个记忆技巧：遍历多维数组，使用
	//范围for来遍历的时候，除了最内层的，其他
	//都要使用引用！

	/* 多维数组及指针 */
	int(*p)[4] = ia;				//p指向含有4个整数的数组
	p = &ia[2];						//p指向ia的尾元素
	
	return 0;
}